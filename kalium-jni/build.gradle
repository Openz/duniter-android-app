import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Pattern

apply plugin: 'com.android.model.library'

model {
    android {
        compileSdkVersion = 21
        buildToolsVersion = "21.1.2"

        defaultConfig.with {
            minSdkVersion.apiLevel = 14
            targetSdkVersion.apiLevel = 21

            versionCode = getVersionCodeFromManifest()
            versionName = "1.0"
        }

        tasks.withType(JavaCompile) {
            compileTask -> compileTask.dependsOn ndkLibsToJar
        }
    }


    android.ndk {
            moduleName = "kaliumjni"
        }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles += 'proguard-rules.pro'
        }
    }

    android.sources {
        main {
            java {
                source {
                    srcDir 'src/main/java'
                }
            }

            jni {
                source {
                    srcDirs = [] //'src/main/jni'
                }
            }

            jniLibs {
                source {
                    srcDir 'src/main/libs'
                }
            }
        }
    }

    /*
    productFlavors {
        create("x86") {
            versionCode = Integer.parseInt("6" + defaultConfig.versionCode)
            ndk.abiFilter += "x86"
        }
        create("mips") {
            versionCode = Integer.parseInt("4" + defaultConfig.versionCode)
            ndk.abiFilter += "mips"
        }
        create("armv7") {
            versionCode = Integer.parseInt("2" + defaultConfig.versionCode)
            ndk.abiFilter += "armeabi-v7a"
        }
        create("arm") {
            versionCode = Integer.parseInt("1" + defaultConfig.versionCode)
            ndk.abiFilter += "armeabi"
        }
        create("fat")
    }*/
}


def getVersionCodeFromManifest() {
    def manifestFile = file('../app/src/main/AndroidManifest.xml')
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext[property.key] = property.value;
        }
    }
}


// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {
    //logger.lifecycle('== Building NDK builds == ')
    loadProperties file('../local.properties').absolutePath
    if (System.getProperty('ANDROID_NDK_HOME') == null && System.getenv('ANDROID_NDK_HOME') == null && project.getProperties().get('ndk.dir') == null) {
        throw new StopExecutionException('Reason: NDK home not set. You should: \n\t - set ANDROID_NDK_HOME env variable\n\t-or add \'ndk.dir\' in file \'local.properties\'\n\t- or add \'-DANDROID_NDK_HOME=\' to java compiler options')
    }
    def ndkHome = System.getProperty('ANDROID_NDK_HOME', project.getProperties().get('ndk.dir', System.getenv('ANDROID_NDK_HOME')))
    def ndkBuildingDir = file('src/main/jni').absolutePath
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir "${ndkBuildingDir}/.."
        commandLine "${ndkHome}/ndk-build.cmd", '-B', "NDK_PROJECT_PATH=${ndkBuildingDir}/..", "APP_BUILD_SCRIPT=${ndkBuildingDir}/Android.mk", "NDK_APPLICATION_MK=${ndkBuildingDir}/Application.mk"
    }
    else {
        workingDir "${ndkBuildingDir}/.."
        commandLine "${ndkHome}/ndk-build",
            "APP_BUILD_SCRIPT=${ndkBuildingDir}/Android.mk",
            "NDK_APPLICATION_MK=${ndkBuildingDir}/Application.mk"
    }
}

task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    //logger.lifecycle('== Create a JAR of the native libs == '+ buildDir)
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(file('src/main/libs')) { include '**/*.so' }
    into 'lib/'
}