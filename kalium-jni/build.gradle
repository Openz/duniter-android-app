import org.apache.tools.ant.taskdefs.condition.Os

import java.util.regex.Pattern

apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21

        versionCode getVersionCodeFromManifest()
        versionName "1.0"


        ndk {
            moduleName "kaliumjni"
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*
    productFlavors {
        x86 {
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
            ndk {
                abiFilter "armeabi"
            }
        }
        fat
    }*/

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkLibsToJar
    }
}



def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext[property.key] = property.value;
        }
    }
}


// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {
    //logger.lifecycle('== Building NDK builds == ')
    loadProperties file('../local.properties').absolutePath
    if (System.getProperty('NDK_HOME') == null && project.getProperties().get('ndk.dir') == null) {
        throw new StopExecutionException('Reason: NDK_HOME not set or ndk.dir is missing in gradle.properties...')
    }
    def ndkHome = System.getProperty('NDK_HOME', project.getProperties().get('ndk.dir'))
    def ndkBuildingDir = file('src/main/jni').absolutePath
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir "${ndkBuildingDir}/.."
        commandLine "${ndkHome}/ndk-build.cmd", '-B', "NDK_PROJECT_PATH=${ndkBuildingDir}/..", "APP_BUILD_SCRIPT=${ndkBuildingDir}/Android.mk", "NDK_APPLICATION_MK=${ndkBuildingDir}/Application.mk"
    }
    else {
        workingDir "${ndkBuildingDir}/.."
        commandLine "${ndkHome}/ndk-build",
                "APP_BUILD_SCRIPT=${ndkBuildingDir}/Android.mk",
                "NDK_APPLICATION_MK=${ndkBuildingDir}/Application.mk"
    }
}

task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    //logger.lifecycle('== Create a JAR of the native libs == '+ buildDir)
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(file('src/main/libs')) { include '**/*.so' }
    into 'lib/'
}